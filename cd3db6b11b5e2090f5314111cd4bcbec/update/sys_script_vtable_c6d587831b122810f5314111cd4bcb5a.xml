<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>1000</cache_ttl>
        <name>Load Contract Exclusions Remote Script</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {

    fetchAllExclusions(v_table, v_query);

    /**
     * fetch all incidents records from the remote instance
     */
    function fetchAllExclusions(v_table, v_query) {
        gs.debug("=======Calling fetchAllExclusions::");
        try {
            var r = new sn_ws.RESTMessageV2('x_snc_contracts_re.GetRemoteContractDataAPI', 'GetRemoteTableData');
            r.setStringParameterNoEscape('limit', '0');
            r.setStringParameterNoEscape('schema_name', 'everestschema');
            r.setStringParameterNoEscape('table_name', 'EXCLUSIONS');
            var response = r.execute();            
            var httpStatus = response.getStatusCode();
            gs.debug("httpStatus::" + httpStatus);
            var responseBody = response.getBody();
// 			gs.debug("+++++++++++arundata::responseBody::" +  responseBody);
			
// 			var transformerDefinition = getTransformerDefinition();
// 			var transformer = new sn_tfrm.Transformer(transformerDefinition, responseBody);
// 			while (transformer.transform()) {
// 				gs.debug("while loop" );
// 				var row = transformer.getRow();
// 				gs.debug("+++++++++++row::" +  row);
// 				v_table.addRow(row);
// 			}
			
			var json = new global.JSON();
			var responseObj = json.decode(responseBody);
			var resultArr = responseObj.data; // all the records are contained in an array 'result'

			for (var i=0; i< resultArr.length; i++){
				//build the row
				var row = {};

				// map fields from the result
				row.treaty_year = resultArr[i].treaty_year;
				row.contract_no = resultArr[i].contract_no;
				row.cedant = resultArr[i].cedant;
				row.underwriter = resultArr[i].underwriter;
				row.broker = resultArr[i].broker;
				row.exclusion_peril_std = resultArr[i].exclusion_peril_std;

				// add the row to the remote table
				v_table.addRow(row);
			}
            
        } catch (ex) {            
            gs.error(ex.message);
            return;
        }
        
    }

    /**
     * returns a sn_tfrm.TransformerDefinition, which defines the mapping of the table fields and elements in the response body
     */
    function getTransformerDefinition() {
        // create a rule list to map a field to its element path
        var ruleList = new sn_tfrm.TransformerRuleList()
            .fromJSON() // the response body is a JSON
            // 'active' field maps to path '$.active'
            .addRule("treaty_year", "$.treaty_year")		
            .addRule("contract_no", "$.contract_no")
            .addRule("cedant", "$.cedant")
            .addRule("underwriter", "$.underwriter")
            .addRule("broker", "broker")
            .addRule("exclusion_peril_std", "$.exclusion_peril_std");

        var recordPath = "$.NOW[:]";
		return new sn_tfrm.TransformerDefinition(ruleList, recordPath);		
        
    }
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set

    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include

    // Note: You must define sys_id for each row so that forms and lists for this table work properly

    // Your code goes here
    // v_table.addRow({...})
})(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>arun.wagle</sys_created_by>
        <sys_created_on>2021-02-17 21:49:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c6d587831b122810f5314111cd4bcb5a</sys_id>
        <sys_mod_count>55</sys_mod_count>
        <sys_name>Load Contract Exclusions Remote Script</sys_name>
        <sys_package display_value="Contracts Review Service Management" source="x_snc_contracts_re">cd3db6b11b5e2090f5314111cd4bcbec</sys_package>
        <sys_policy/>
        <sys_scope display_value="Contracts Review Service Management">cd3db6b11b5e2090f5314111cd4bcbec</sys_scope>
        <sys_update_name>sys_script_vtable_c6d587831b122810f5314111cd4bcb5a</sys_update_name>
        <sys_updated_by>arun.wagle</sys_updated_by>
        <sys_updated_on>2021-02-18 07:26:50</sys_updated_on>
        <table>x_snc_contracts_re_st_contract_exclusions_remote</table>
    </sys_script_vtable>
</record_update>
